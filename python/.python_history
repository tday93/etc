a = [1,2,3,4,5,6,7]
a[1:]
quit()
a = [1,2,3,4,5,6,7]
a[2:]
quit()
import gcal
dir(gcal)
help(gcal)
quit()
from optparse import OptionParser
import inspect
inspect.getmembers(OptionParser, predicate=inspect.ismethod)
inspect.getmembers(OptionParser)
inspect.getmembers(OptionParser, predicate=inspect.ismethod)
inspect.getmembers(OptionParser, predicate=inspect.isfunction)
parser= OptionParser()
inspect.getmembers(parser, predicate=inspect.isfunction)
inspect.getmembers(parser, predicate=inspect.ismethod)
quit()
import test2
import inspect
inspect.getmembers(test2, predicate=inspect.isfunction)
test2.one()
funcs = dict(inspect.getmembers(test2, predicate=inspect.isfunction))
print(funcs)
funcs['one']()
funcs['two']()
funcs['three']()
wq
quit()
import bplugins
quit()
import bplugins
quit()
import bplugins
quit()
import bplugins
quit()
import bplugins
quit()
import bplugins
quit()
import bplugins
quit()
import bplugins
quit()
import bplugins
inspect.getmembers(bplugins, predicate=inspect.isfunction)
import inspect
inspect.getmembers(bplugins, predicate=inspect.isfunction)
quit()
import datetime
datetime.datetime.tomorrow()
datetime.date.tomorrow()
datetime.date.now()
datetime.date.now
datetime.datetime.now()
quit()
s = "12345
s = "12345"
s -"1"
s +"1"
quit()
import os
os.system("python firstnames.py")
t,n = os.system("python firstnames.py")
t = os.system("python firstnames.py")
t
t = os.system("python firstnames.py")[0]
import subprocess
result = subprocess.run(['python firstnames.py'], stdout=subprocess.PIPE)
result = subprocess.run(['python','firstnames.py'], stdout=subprocess.PIPE)
result.stdout
result = subprocess.run(['python','firstnames.py'])
result
result = subprocess.run(['python','firstnames.py'], stdout=subprocess.PIPE)
result.stdout.decode('utf-8')
exit()
s = "file.yaml"
s
s[-2:]
s[:-2]
s[:-5]
quit()
s = "/web/dir/file/"
s[2:]
s[5:]
s[4:]
quit()
s = "/web/dir/file"
s.split('/')
s.split('/')[1:]
p = s.split('/')[1:]
p
import os
os.path.join(p)
os.cwd
os.cwd()
cwd
os.getcwd()
p = os.getcwd()+"/file"
p
p - os.getcwd()
p.split(os.getcwd())
p = os.getcwd()+"/file/fart/poop"
p.split(os.getcwd())
p.split(os.getcwd())[1]
p = os.getcwd()+"/file/fart/poop.yaml"
p.split(os.getcwd())[1]
p.split(os.getcwd())[1].split('.yaml')[0]
quit()
import smtplib
from email.mime.text import MIMEText
msg = MIMEText("this is a test message to")
msg['Subject'] = "test yo"
msg['From'] = "test@elodin.tyrr.net"
msg['To'] = "tday93@gmail.com"
s = smtplib.SMTP('localhost')
quit()
import of
import os
f = "/web/projects/file.yaml"
os.path.basename(f)
f = "/web/projects"
f
os.listdir(f)
os.path.isdir(os.listdir(f)[0])
os.path.isdir(os.path.join(f,os.listdir(f)[0]))
quit()
s = "file.yaml"
s[:-5]
quit()
s =[1,2,3,4,5,6,7,8]
s
s.pop()
s
quit()
import os
path ="/web/test/testdir/dir.yaml"
os.path.split(path)
os.path.split(path)[0]
import glob
glob.glob("/web/test/*.yaml"
)
glob.glob("/web/test/three/*.yaml")
quit()
import glob
for filename in glob.iglob("/web/test/**/*.yaml", recursive=True):
print(filename)
for filename in glob.iglob("/web/test/**/*.yaml", recursive=True):
	print(filename)
for filename in glob.iglob("/web/test/**/*.yaml", recursive=True):
import os
for filename in glob.iglob("/web/test/**/*.yaml", recursive=True):
	if os.path.basename(filename) == "dir.yaml":
		print(filename)
quit()
s = "test.yaml"
s[:-5]
quit()\
p = {('beep', 'boop', 'doop'): "fart"}
p["boop"]
for k, v in p.items():
	for key in k:
quit()
import urllib
urllib.retrieve(https://i0.wp.com/foododdity.com/wp-content/uploads/2012/04/bread-gloves.jpg?fit=653%2C653, "/memes/test.jpg")
urllib.retrieve("https://i0.wp.com/foododdity.com/wp-content/uploads/2012/04/bread-gloves.jpg?fit=653%2C653", "/memes/test.jpg")
urllib.urlretrieve("https://i0.wp.com/foododdity.com/wp-content/uploads/2012/04/bread-gloves.jpg?fit=653%2C653", "/memes/test.jpg")
import urllib2
urllib.urlretrieve("https://i0.wp.com/foododdity.com/wp-content/uploads/2012/04/bread-gloves.jpg?fit=653%2C653", "/memes/test.jpg")
quit()
urllib.request.urlretrieve("https://i0.wp.com/foododdity.com/wp-content/uploads/2012/04/bread-gloves.jpg?fit=653%2C653", "/memes/test.jpg")
import urllib
urllib.request.urlretrieve("https://i0.wp.com/foododdity.com/wp-content/uploads/2012/04/bread-gloves.jpg?fit=653%2C653", "/memes/test.jpg")
import urllib.request
urllib.request.urlretrieve("https://i0.wp.com/foododdity.com/wp-content/uploads/2012/04/bread-gloves.jpg?fit=653%2C653", "/memes/test.jpg")
urllib.request.urlretrieve("https://i0.wp.com/foododdity.com/wp-content/uploads/2012/04/bread-gloves.jpg?fit=653%2C653", "test.jpg")
urllib.request.urlretrieve("https://i0.wp.com/foododdity.com/wp-content/uploads/2012/04/bread-gloves.jpg?fit=653%2C653", "memes/test.jpg")
quit()
s = 'brobot larry is is real'
s.count(' is ')
s.count(' is')
s.count(' is ')
quit()
s = "\bis\b"
s
s = "/\bis/\b"
s
s = "<is>"
s
import re
prog = re.compile('\s{}\s'.format(s))
prog.findall("brobot test <is> is test")
prog = re.compile('\b{}\b'.format(s))
prog.findall("brobot test <is> is test")
prog = re.compile('\W{}\W'.format(s))
prog.findall("brobot test <is> is test")
quit()
a = ["cucksquad", "crunchwrap supreme"]
b = ["everyone", "cucksquad"]
set(a).instersection(b)
set(a).intersection(b)
b = ["everyone"]
set(a).intersection(b)
type(set(a).intersection(b))
b = ["everyone", "cucksquad"]
type(set(a).intersection(b))
len(set(a).intersection(b)
)
b = ["everyone"]
len(set(a).intersection(b))
quit()
s =["woomp"]
s
s.append("wamp"
)
s
quit()
s = [1,2,3]
t = [4,5,6]
s.append(t)
s
quit()
[] + []
[] + ""
"" + ""
"" + []
1 + ""
[] + {}
{} + []
a
a = a
beep
[15]
quit()
s = [0] *10
s
for i in s:
	s[i] = 1
s
for i in s:
	i = 1
s
p = [ 1 for element in s]
p
s = p
s
quit()
import numpy
s = numpy.zeros(shape=(10,10))
s
p = numpy.ndarray(shape=(5,5))
p
p.fill(1)
p
for row in p:
quit()
5/2
int(5/2)
quit()
class Test(object):
	def __init__(self):
		self.n =5
t = Test()
t
q =t 
q
t.n = 10
q
q.n
quit()
class Test(object):
		self.n =5
quit()
class Test(object):
	def __init__(self):
		self.n = 5
t = Test()
t.n
import copy
q = copy.copy(t)
q.n
t.n = 10
q.n
t.n
quit()
import nltk
nltk.download()
h
l
q
quit()
import nltk
nltk.download()
d
l
all
quit()
s = ["one", "two", "three"]
t = ["one", "two", "three"]
s==t
	quit()
quit()
from neovim import attach
nvim = attach('socket', path='/tmp/nvim')
quit()
from neovim import attach
nvim = attach('socket, path='/temp/nvim')
nvim = attach('socket', path='/temp/nvim')
quit()
from neovim import attach
nvim = attach('socket', path='/temp/nvim')
quit()
s = "#test#"
s[1:-1]
quit()
s ="s"
s[0:0]
[0:1]
s
s[o:1]
s[0:1]
quit()
s = {"one": 1, "two": 2, "three": 3}
s
cats = [k for k, v in s.items()]
cats
quit()
def fart(thing1, name="!fart"):
	print(thing1)
fart.name
exit()
def fart(thing1):
	self.command = "!fart"
	print(thing1)
fart.command
fart.command = "!fart"
fart.command
fart(beep boop)
fart("beep boop")
exit()
def fart(poop):
	print(poop)
print(getarr(fart))
print(getattr(fart))
print(fart.getattr())
exit(0
)
None or "" or [] or 'Hi there' or False
['Fizz'*(not i%3) + 'Buzz'*(not i%5) or i for i in range(1, 100)]
ls
exit()
d = {"hello": "goodbye", "yes": "no"}
**d
def splat_test(**kwargs):
	for item in kwargs:
		print(item)
splat_test(**d)
splat_test(d)
quit()
s ="hello boop doop moop"
s.split()
s
s = s.split(" ")
s[0:]
s[1:]
quit()
def test(fire, water):
	return fire, water
test("fart")
test("fart", "poop")
test("fart", "poop", "butts")
quit()
def test(arg1, arg2):
	print(arg1)
	print(arg2)
test(arg1="fart", arg2="fartfart")
quit()
import room
getattr(room)
dir(room)
getattr(room, "TestRoom")("name-test", "desc-test", {})
quit()
t_d = {"one":"two", "three":"four"}
for item in t_d:
	print item
for item in t_d:
	print(item)
quit()
"blue" or "green"
"blue" or False
bool("")
bool([])
bool([1])
bool({})
3%3
5%3
0
bool(o)
bool(0)
not 5
not 0
"red"*False
"red"*True
"red"*5
"red"*0
""*6
False*6
True*6
['Fizz'*(not i%3) + 'Buzz'*(not i%5) or i for i in range(1, 100)]
quit()
import os
import glob
for file in glob.glob("*.json"):
	print(file)
	print(type(file))
for file in glob.glob("../*.py"):
	print(file)
	print(type(file))
quit()
p = "saves/actor/playercharacter.json"
import os
os.path.basename(p)
os.path.basename(p).split(".")[0]
quit()
class BaseClass(object):
	pass
class Test(BaseClass):
	pass
i = Test()
type(i)
type(i).__bases__
type(i).__class__
i.class
dir(i)
i.__class__
i.__dict__
i.__format__
i.format()
format(i)
i.__str__
i.__repr__
i
type(i)
type(i).__name__
type(i).__bases__.__name__
i.__bases__.__name__
i.__name__
i
i.__class__.__bases__
i.__class__.__bases__.__name__
i.__class__.__bases__
i.__class__.__bases__[0].__name__
quit()
x1 = 2
x2 = 10
x3 = -5
x1 -x2
quit()
x1 = -1
x2 = 2
-3 +2
quit()
s = None
"fart" in None
quit()
from collections import defaultdict
d = defaultdict({})
d = defaultdict(lambda: {})
d["burp"]
d["burp"] = "hello"
d["burp"]
d["wat"]
quit()
from collections import defaultdict
d = defaultdict(lambda: {}, {"hello":"goodby"})
d["hello"]
quit()
s = {"1":1,"2":2,"3":3}
t = {"1":0,"2":3,"3":"}
t = {"1":0,"2":3,"3":3}
s
t
for k, v in s.items():
	if t[k] >= v:
		print("t is greater than v")
quit()
a =1
b =2
c =1
any(a=1, b=2)
any(a==1, b==2)
any([a==1, b==2])
[a==1, b==2]
def test():
	return "hello", "goodbye"
a,b = test()
a
b
l = [1,2]
if l[2]
l[2]
if l[2]:
	print("huh")
quit()
s = {"name":"s", "weight": 1}
t = {"name":"t", "weight":5}
q = []
q.append(s)
q.append(t)
z = [ item * item["weight"] for item in q]
z = [ [item] * item["weight"] for item in q]
z
x = [val for sublist in z for val in sublist]
x
quit()
s = ["s", "boop", 5]
t = ["t", "beep
t = ["t", "beep", 2]
q = [s,t]
z = [item * item[2] for item in q]
z
quit()
def test(name, **kwargs):
	print(name)
test("fart"
)
quit
quit()
import test/boop
test/boop import beep
from test/boop import beep
quit()
import scripts
s = "test"
do_thing = getattr(scripts, test.boop)
do_thing = getattr(scripts, s+".boop")
do_thing = getattr(scripts, "test")
dir(scripts)
quit()
from scripts import test
do_thing = getattr(test, "boop")
do_thing()
quit()
from scripts import *
getattr("test", "boop")
getattr(scripts, "test")
quit()
import importlib
thing = importlib.import_module("..test", 'scripts.subpkg')
thing = importlib.import_module("test", 'scripts')
thing()
thing.boop()
dir(thing)
dir(test)
dir(thing)
quit()
from importlib import import_module
quit()
from importlib import import_module
mod = import_module("scripts.test")
mod = import_module("test")
met = getattr(mod, "boop")
met()
quit()
import importlib.util
spec = importlib.util.spec_from_file_location("test", "./scripts/test.py")
foo =importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)
foo.boop()
thing = foo.boop
thing()
quit()
import game.gameobjects.actors
test = getattr(game.gameobjects.actors, "player")
quit()
import run
run.main()
run.main([])
quit()
exec(open("./run.py").read())
examine all
quit()
import game.gameobjects as go
import game
from game import gameobjects as go
from game.gameobjects import *
qiut()
ls
quit()
import game
getattr(game, "gameobjects")
dir(game)
getattr(game, "Action")
quit()
from game.actions import actions
quit()
from game.actions import actions
quit()
import actions
getatrr(actions, "Action")
getattr(actions, "Action")
getattr(actions, "Action"
)
quit()
class Foo(object):
	def __init__(self, thing):
		self.a = 1
		self.b =2
		self.thing = thing
	def do_nothing(self):
		pass
class Bar(object):
	def __init__(self):
		self.q = 5
b = Bar()
f = Foo(b)
f.__dict__
qiut()
ls
quit()
def test():
	pass
test.__name__
class Thing(object):
	def __init__(self):
		self.a =1
		self.b =2
quit()
class Thing(object):
	def __init__(self):
		self.b =2
	def get(self, name):
		return getattr(self, name)
t = Thing()
t.get("b")
dir(t)
t.boop()
quit()
class Test(object):
	def __init__(self):
	
quit()
import test
t = test.Test()
quit(0
quit()
import test
t = test.Test()
dir(t)
t.descriptions
quit()
d = {"one": 1, "two": 2}
list(d)
quit(0
)
from tinydb import TinyDB, Query
db = TinyDB('db.json')
db.insert({'name': 'testdatabase', 'version': 0.1})
rooms = db.table('rooms')
rooms.insert({'i_name': "testroom"})
actors = db.table('actors')
actos.insert({'i_name':'testactor'})
actors.insert({'i_name':'testactor'})
quit()
class Boop(object):
	def __init__(self):
		self.a = 3
b = Boop()
b
dir(b)
for attr in dir(b):
	if not attr.startswith("_"):
for attr in dir(b):
	if not attr.startswith("_"):
		print(getattr(b, attr))
quit()
from tinydb import TinyDB, Query
db = TinyDB('db.json')
db.all()
rooms = db.table("rooms")
rooms.all()
db.get(eid=1)
rooms.get(eid=1)
quit()
from game import Game
g = Game("boop")
g.run()
quit()
g.player_input("boop")
from game import Game
g = game("doop")
g = Game("doop")
g.run()
quit()
from game import Game
g = Game("doop")
g.run()
quit()
from game import Game
g = Game("boop")
g.run()
import asyncio
await g.run()
g
yield from g.run()
qiut()
quit()
from game import Game
g = Game("boop")
quit()
from tinydb import TinyDb
from tinydb import TinyDB
db = TinyDB()
db = TinyDB("test.json")
test_table = db.table('test_table_name')
test_table.name
test_table.name()
test_table.__name__
dir(test_table)
quit()
l = ["one", "two", "three", "four"]
s = ""
for line in l:
	s = s+ "{}\n".format(line)
s
s = ""
for line in l:
	s = s+ "{} \n ".format(line)
s
s = ""
for line in l:
	s = s+ "{} \\n ".format(line)
s
print(s)
for line in l:
s =""
for line in l:
	s = s+ "{}\n ".format(line)
print(s)
quit()
class Test(object):
	def __init__(self):
		self.name = "fart"
	def get_cat(self):
		return (self.category or self.name)
t = Test()
t.get_cat()
quit()
q = int(32, base=2)
q = int('32', base=2)
q = int('01001', base=2)
q
quit()
e = IndexError()
dict(e)
e.dict()
dir(e)
e.args
quit()
import playerchar
pc = playerchar.PlayerCharacter("player_character_sample.json")
dict(pc)
dir(pc)
pc.stats
pc.dict()
pc.__dict__
quit()
import playerchar
pc = playerchar.PlayerCharacter("player_character_sample.json")
ps.stats
pc.stats
pc.stats["str"] = 16
ps.stats
pc.stats
pc.save_data()
quit()
10 /2
10 /2 -5
1/ 2 -5
2 /2 -5
ceil(1/2-5)
from math import ceil
ceil(1/2-5)
ceil(10/2-5)
ceil(30/2-5)
quit()
from math import ceil
import json
t = {}
vals = [item for item in range(1,30)]
vals
vals.append(30)
vals
for item in vals:
	t[val] = ceil(val\2-5)
	t[val] = ceil(val/2 -5)
for item in vals:
	t[val] = ceil(val/2 -5)
for item in vals:
	t[item] = ceil(item/2 -5)
t
t = {}
ceil(1-.5/2 -5)
ceil(.5/2 -5)
int(1/2 -5)
vlas
vals
for val in vals:
def ask(val):
	print(val)
	return input(val?)
def ask(val):
	return input(str(val) + "?")
t = {val: ask(val) for val in vals}
-5
-4
-3
-2
-1
0
1
2
3
4
5
6
7
8
9
10
print t
t
with open("ability_mods.json", "w") as fo:
	json.dump(t, fo)
quit()
import json
with open("ability_mods.json") as fn:
	old_dict =json.load(fn)
new_dict = {k: int(v) for k,v in old_dict.items()}
with open("ability_mods.json", "w") as fo:
	json.dump(new_dict, fo)
quit()
import json
def ask(val):
def exp(lvl):
	return int(input("{}, Exp:".format(lvl)))
def prof(lvl):
def exp(lvl):
	return int(input("{}, Exp:".format(lvl)))
def prof(lvl):
	return int(input("{}, Prof:".format(lvl)))
t = {lvl :{"exp":exp(lvl), "prof":prof(lvl)} for lvl in range(1,21)}
0
2
300
2
900
2
2700
2
6500
3
14000
3
2300
3
34000
3
48000
4
64000
4
85000
4
100000
4
120000
5
140000
5
165000
5
195000
5
225000
6
265000
6
305000
6
355000
6
t
with open("levels.json", "w") as fo:
	json.dump(t, fo)
quit(0
)
def mod(a_score):
from math import floor
def mod(score):
	return floor(score/2 -5)
mod(1)
mod(2)
mod(3)
quit(0
)
1 +1
 l = [1,2,3,4,5,6,7,8,9]
l = [1,2,3,4,5,6,7,9]
ls
l
s = {1,2,3,4,5,6,7}
s
d = {1: "a", 2:"b", 3:"c"}
d
l
l.append(1)
l
s
s.append(1)
s = s +{1}
ls
s
d
s[1]
d[1]
d[2]
l = [ item for item in range(1,101)]
l
q = [item +2 for item in l]
q
f = [item for item in l if not (item % 2)]
f
quit()
import playerchar
pc = playerchar.PlayerCharacter("player_character.json")
pc = playerchar.PlayerCharacter("player_characteri_sample.json")
pc = playerchar.PlayerCharacter("player_character_sample.json")
ps
pc
pc.save_data()
quit()
import playerchar
pc = playerchar.PlayerCharacter("player_character_sample.json")
quit()
import turnqueue
tq = turnqueue.TurnQueue()
tg.add("dave")
tq.add("dave")
tq.add("walt")
tq.add("skeleton1")
tq.next()
quit()
import turnqueue
tq = turnqueue.TurnQueue()
tq.add("dave")
tq.add("walt")
tq.add("skeleton1")
tq.next()
quit()
from turnqueue import TurnQueue
tq = TurnQueue()
tq.add("dave", 3)
tq.add("walt", 2)
tq.add("skeleton", 4)
tq.add("skeleton2",1)
tq.queue
tq.next()
quit()
import form_fill
form_fill.form_fill("test.json")
Bob
quit()
import form_fill
form_fill.form_fill("test.json")
Bob
Dave
Bill
Will
William
Billiam
Bobiam
Bobert
Robert
Mark
Matt
Matthew
Markthew
QUIT
one
two
three
four
quit(0
)
import form_fill
form_fill.form_fill("test.json")
one
two
three
four
QUIT
uno
dos
tres
quatro
cinco
seis
QUIT
un
deux
teux
QUIT
quit()
l = [1,2,3,4,5,6]
1[1:]
l[1:]
l[-1:]
quit()
l = [1,2,3,4,5,6,7,8,9,10]
l
q =[ item * 7 for item in l ] 
q
p = [ item *7 for item in item if item != 5]
p = [ item *7 for item in l if item != 5]
p
quit()
a = {"a":1, "b":2}
b = {"c":3, "d":4}
a+b
quit()
import nltk
nltk.download()
l
d
l
popular
c
m
q
quit()
import requests
from bs4 import BeautifulSoup
r = requests.get(https://orangecounty.craigslist.org/sad/d/network-engineer/6235280764.html)
r = requests.get("https://orangecounty.craigslist.org/sad/d/network-engineer/6235280764.html")
c = r.content
soup = BeautifulSoup(c)
soup.find_all("a")
soup.find_all("span")
soup.find_all("span", class="postingtitle")
soup.find_all("span", class_="postingtitle")
soup.find_all("h2", class_="postingtitle")
soup.find_all("span", id="titletextonly")
soup.find_all("span", id="titletextonly").content[0]
title = soup.find_all("span", id="titletextonly")
title
title[0]
dir(title)
dir(title[0])
title[0].content
title[0].text
quit()
s = "123456789"
s[:-4]
quit()
["Fizz"*(not num %3) + "Buzz"*(not num %5) or num for num in range(1,100)]
[print("Fizz"*(not num %3) + "Buzz"*(not num %5) or num) for num in range(1,100)]
["Fizz"*(not num %3) + "Buzz"*(not num %5) or num for num in range(1,100)]
quit()
s = "sandwich" 
l = "hey ho sandwich man"
if s in l:
	print("True")
l = "beep boop doop"
if s in l:
	print("True")
s = "!addregex beep boop doop woop"
s[5:]
s[6:]
s[7:]
s[9:]
s[10:]
quit()
import json
factoids = json.loadq
:q
quit()
s = "!hello"
t = s.split()
t
s = "!hello how are you today"
t = s.split("!hello")
t
t = s.split("!hello"+" ")
t
t[1]
s = "how are you today junior?"
"today" in s
s
t = "its a beautiful day today"
m = [s,t]
m
q = [item for item in m if "today" in item]
q
q = [item for item in m if "today junior" in item]
q
quit()
l = ["one", "two", "three", "one"]
l.index("one")
l = [1,2,3,4,5,6]
s = [6,5,4,3,2,1]
q = zip(l,s)
q
q[0]
for item in q:
	print(item)
quit()
s = "hello, how are you $***, im fine thank you $***"
s.replace("$***", "\S*")
s
s.replace("$***", "\\S*")
s.replace("$***", "\\\S*")
s.replace("$***", "/\S*")
t = s.replace("$***", r"\S*")
t
print(t)
import fnmatch
fnmatch('hello how are you today', 'hello * are you today')
fnmatcha.fnmatch('hello how are you today', 'hello * are you today')
fnmatch.fnmatch('hello how are you today', 'hello * are you today')
quit()
s = "hello how are you wont you tell me your name"
s.split()
s
quit()
import re
re.escape("$***")
print(re.escape("$***"))
s = "test string yo"
s.replace("string", "text")
s
from test import prep_regex
s = "This is an example of $*** a wildcard"
prep_regex(s)
quit()
from test import prep_regex
s = "This is an example of $*** a wildcard"
prep_regex(s)
print(prep_regex)
print(prep_regex(s))
s = "This is an example of $*** $*** a wildcard"
print(prep_regex(s))
quit()
import re
quit()
s = "$[1]"
s[2]
quit()
s = "*$who"
s[1:]
quit()
test = ("One: {"one"}"
test = ("One: {one}"
q
d = {"one":1, "two":2}
d
test = ("One: {one}"
	"Two: {two}").format(d)
d["one"]
quit()
s = ["." for x in range(20)]
s
s = ["." for x in range(10)]
s
map = ["".join(s) for y in range(10)]
map
quit()
type("hello")
type(b"hello")
quit()
import random
g = lambda x: random.randrange(0,9)
g(1)
g(3)
g("akdjrhfgljkehr")
q = "hello"
t = None
g = lambda x: t or q
g(1)
def test():
	print("test fired")
g = lambda x: test()
g(1)
print(g(1))
w = "word!"
w[:1]
w[::-1]
w[0:-1]
w = "$word!"
w[:-1]
w[:1]
w[-1:]
w[-1:2]
w[-1:-3]
w[-1:0]
q = [1,2,3,4]
t = q
q.append(5)
t
t.append(5)
t
q
quit()
s = "ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss"
n = 0
for char in s:
	n += 1
n
quit()
import re
s = "th$[1]beep"
re.split("(\$\[\d+\])", s)
quit()
import re
s = "th$digitoogle"
pat = "\$digit"
re.sub(pat, "1", s)
re.sub(pat, "2", s)
s = "I need $digit eggs"
re.sub(pat, "2", s)
quit()
import re
p = "(\$\[\d+\])"
s = "th$[1]oogle $[2]"
m = re.search(p, s)
m.groups
m.group()
m.groups()
m =re.match(p, s)
m.groups()
m.group
m
m = re.findall(p, s)
m
quit()
s = "$[1]"
s[2:-1]
s = "$[145678]"
s[2:-1]
import datetime
datetime.now()
datetime.datetime.now()
datetime.datetime.now().isoformat()
s = [1,2,3,4,5,6]
range(s)
len(s)
range(5,5)
for i in range(5,5):
	print(i)
quit()
q = range(5,5)
q
q[0]
q[5]
for i in q:
	print(i)
quit()
range(5, 5+1)
range[0]
for i in range(5,6):
	print(i)
import itertools
itertools.permutations("12345", repeat=12)
itertools.permutations("12345", 12)
s = itertools.permutations("12345", 12)
for item in s:
	print(s)
s
list(s)
s
import itertools
s = itertools.product("12345", repeat=12)
print(s)
for item in s:
	print(item)
import itertools
s = itertools.product("12345", repeat=2)
s
list(s)
from phonemizer import phonemize
quit()
q = [1,2,3,4]
p = q
p.append(5)
q
quit()
import datetime.datetime as dt
from datetime import datetime as dt
dt.now()
str(dt.now())
[]
[] == true
[] == True
[] == False
quit()
s = None
q = "hello"
p = "world"
" ".join([s,q,pq])
quit()
s = "max_target"
s[4:]
s[:7]
s[:-7]
quit()
l = [1,2,3,4,5]
len(l)
l[4]
quit()
import helper_functions as hf
hf.syllable_count("this is a test")
await hf.syllable_count("this is a test")
quit()
type(type)
type.dir()
n = Type()
n = type()
class(type)
getattrs(type)
dir(type)
quit()
s = "string %%20"
s[:-4]
s[:-5]
quit()
from doc_test import test
test.__doc__
:q
quit()
q = [1,2]
s = [1,2]
q == s
q = {1:2, 3:4}
s = {1:2, 3:4}
q == s
quit()
